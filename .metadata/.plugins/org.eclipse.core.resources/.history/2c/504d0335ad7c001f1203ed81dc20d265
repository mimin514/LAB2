/*
 * ledma.c
 *
 *  Created on: Sep 20, 2024
 *      Author: User
 */


#include "ledma.h"

const int MAX_LED_MATRIX = 8;
int index_led_matrix = 0;
uint8_t matrix_buffer[8] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
int count=0;
// Function to update the LED matrix based on the index
void ledma_init(){
	HAL_GPIO_WritePin(GPIOA,
			ENM0_Pin|ENM1_Pin|ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin|ENM6_Pin|ENM7_Pin,
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB,
				ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin|ROW7_Pin,
				GPIO_PIN_RESET);
}

void updateLEDMatrix(uint8_t *pattern) {
    	if(count>=8) count=0;

        // Set the current row (only one row active at a time)
        HAL_GPIO_WritePin(GPIOA, (1 << count), GPIO_PIN_SET);

        // Set the column data for this row
        HAL_GPIO_WritePin(GPIOB, pattern[count], GPIO_PIN_SET);

        // Small delay to allow the row to display
        HAL_Delay(100);  // 1ms delay to simulate row scanning
        count++;

}
void row(int num) {
    switch (num){
    		case 0:
    			HAL_GPIO_WritePin(GPIOB,
    							ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin|ROW7_Pin,
    							GPIO_PIN_RESET);
    			HAL_GPIO_WritePin(GPIOB,ROW0_Pin,GPIO_PIN_SET);
    			break;
    		case 1:
    			HAL_GPIO_WritePin(GPIOB,
    							ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin|ROW7_Pin,
    							GPIO_PIN_RESET);
    			HAL_GPIO_WritePin(GPIOB,ROW1_Pin,GPIO_PIN_SET);
    			break;
    		case 2:
    			HAL_GPIO_WritePin(GPIOB,
    							ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin|ROW7_Pin,
    							GPIO_PIN_RESET);
    			HAL_GPIO_WritePin(GPIOB,ROW2_Pin,GPIO_PIN_SET);
    			break;
    		case 3:
    			HAL_GPIO_WritePin(GPIOB,
    							ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin|ROW7_Pin,
    							GPIO_PIN_RESET);
    			HAL_GPIO_WritePin(GPIOB,ROW3_Pin,GPIO_PIN_SET);
    			break;
    		case 4:
    			HAL_GPIO_WritePin(GPIOB,
    							ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin|ROW7_Pin,
    							GPIO_PIN_RESET);
    			HAL_GPIO_WritePin(GPIOB,ROW4_Pin,GPIO_PIN_SET);
    			break;
    		case 5:
    			HAL_GPIO_WritePin(GPIOB,
    							ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin|ROW7_Pin,
    							GPIO_PIN_RESET);
    			HAL_GPIO_WritePin(GPIOB,ROW5_Pin,GPIO_PIN_SET);
    			break;
    		case 6:
    			HAL_GPIO_WritePin(GPIOB,
    							ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin|ROW7_Pin,
    							GPIO_PIN_RESET);
    			HAL_GPIO_WritePin(GPIOB,ROW6_Pin,GPIO_PIN_SET);
    			break;
    		case 7:
    			HAL_GPIO_WritePin(GPIOB,
    							ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin|ROW7_Pin,
    							GPIO_PIN_RESET);
    			HAL_GPIO_WritePin(GPIOB,ROW7_Pin,GPIO_PIN_SET);
    			break;
    		default:
    			break;
    	}
}

void col(int num) {
	switch (num){
	    		case 0:
	    			HAL_GPIO_WritePin(GPIOA,
	    						ENM0_Pin|ENM1_Pin|ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin|ENM6_Pin|ENM7_Pin,
	    						GPIO_PIN_SET);
	    			HAL_GPIO_WritePin(GPIOB,ROW0_Pin,GPIO_PIN_RESET);
	    			break;
	    		case 1:
	    			HAL_GPIO_WritePin(GPIOB,
	    							ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin|ROW7_Pin,
	    							GPIO_PIN_RESET);
	    			HAL_GPIO_WritePin(GPIOB,ROW1_Pin,GPIO_PIN_RESET);
	    			break;
	    		case 2:
	    			HAL_GPIO_WritePin(GPIOB,
	    							ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin|ROW7_Pin,
	    							GPIO_PIN_RESET);
	    			HAL_GPIO_WritePin(GPIOB,ROW2_Pin,GPIO_PIN_RESET);
	    			break;
	    		case 3:
	    			HAL_GPIO_WritePin(GPIOB,
	    							ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin|ROW7_Pin,
	    							GPIO_PIN_RESET);
	    			HAL_GPIO_WritePin(GPIOB,ROW3_Pin,GPIO_PIN_RESET);
	    			break;
	    		case 4:
	    			HAL_GPIO_WritePin(GPIOB,
	    							ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin|ROW7_Pin,
	    							GPIO_PIN_RESET);
	    			HAL_GPIO_WritePin(GPIOB,ROW4_Pin,GPIO_PIN_RESET);
	    			break;
	    		case 5:
	    			HAL_GPIO_WritePin(GPIOB,
	    							ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin|ROW7_Pin,
	    							GPIO_PIN_RESET);
	    			HAL_GPIO_WritePin(GPIOB,ROW5_Pin,GPIO_PIN_RESET);
	    			break;
	    		case 6:
	    			HAL_GPIO_WritePin(GPIOB,
	    							ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin|ROW7_Pin,
	    							GPIO_PIN_RESET);
	    			HAL_GPIO_WritePin(GPIOB,ROW6_Pin,GPIO_PIN_RESET);
	    			break;
	    		case 7:
	    			HAL_GPIO_WritePin(GPIOB,
	    							ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin|ROW7_Pin,
	    							GPIO_PIN_RESET);
	    			HAL_GPIO_WritePin(GPIOB,ROW7_Pin,GPIO_PIN_RESET);
	    			break;
	    		default:
	    			break;
	    	}
}

// Display a pattern on the LED matrix
void DisplayPattern(uint8_t* pattern) {
//    for (int row = 0; row < 8; row++) {
//        row(row); // Select the row
//        uint8_t col_data = pattern[row]; // Get the column data for the current row
//
//        for (int col = 0; col < 8; col++) {
//            if (col_data & (1 << col)) {
//                col(col); // Activate the column if the bit is set
//            }
//        }
//
//        HAL_Delay(1); // Adjust the delay for your refresh rate
//    }
}
